import type { NextApiRequest, NextApiResponse } from 'next';

// Import the same generator functions from generate-boilerplate
// This endpoint returns files as JSON instead of ZIP

interface Config {
  framework: string;
  language: string;
  features: string[];
}

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') return res.status(405).end();

  const config: Config = req.body;

  if (!config.framework || !config.language) {
    return res.status(400).json({ error: 'Framework and language are required' });
  }

  try {
    // Generate files (reuse logic from generate-boilerplate.ts)
    const files = generateProjectFiles(config);

    return res.status(200).json({
      files,
      config,
    });
  } catch (error: any) {
    console.error('Generation error:', error);
    return res.status(500).json({
      error: 'Failed to generate files',
      details: error.message,
    });
  }
}

// Copy the generateProjectFiles function from generate-boilerplate.ts
// For now, let's create a simple version
function generateProjectFiles(config: Config): Record<string, string> {
  const files: Record<string, string> = {};
  const { framework, language, features } = config;

  // Generate package.json
  files['package.json'] = JSON.stringify({
    name: `repoza-${framework}-project`,
    version: '1.0.0',
    private: true,
    scripts: {
      dev: framework === 'nextjs' ? 'next dev' : 'vite',
      build: framework === 'nextjs' ? 'next build' : 'vite build',
      start: framework === 'nextjs' ? 'next start' : 'vite preview',
    },
    dependencies: {
      ...(framework === 'nextjs' && {
        next: '^14.0.0',
        react: '^18.2.0',
        'react-dom': '^18.2.0',
      }),
    },
    devDependencies: {
      ...(language === 'typescript' && {
        typescript: '^5.0.0',
        '@types/node': '^20.0.0',
        '@types/react': '^18.0.0',
      }),
      ...(features.includes('tailwind') && {
        tailwindcss: '^3.4.0',
        postcss: '^8.4.0',
        autoprefixer: '^10.4.0',
      }),
    },
  }, null, 2);

  // Generate README
  files['README.md'] = `# Project Generated with Repoza ðŸš€

## Configuration
- **Framework:** ${framework}
- **Language:** ${language}
- **Features:** ${features.join(', ') || 'None'}

## Getting Started

\`\`\`bash
npm install
npm run dev
\`\`\`

Generated by [Repoza](https://repoza.vercel.app)
`;

  // Generate .gitignore
  files['.gitignore'] = `node_modules/
.next/
dist/
.env
.env.local
.DS_Store
`;

  // Generate main files based on framework
  if (framework === 'nextjs') {
    files['pages/index.tsx'] = `export default function Home() {
  return (
    <div className="min-h-screen flex items-center justify-center">
      <h1 className="text-4xl font-bold">Welcome to Your Project ðŸš€</h1>
    </div>
  );
}
`;

    files['pages/_app.tsx'] = `import type { AppProps } from 'next/app';
${features.includes('tailwind') ? "import '../styles/globals.css';" : ''}

export default function App({ Component, pageProps }: AppProps) {
  return <Component {...pageProps} />;
}
`;

    if (features.includes('tailwind')) {
      files['styles/globals.css'] = `@tailwind base;
@tailwind components;
@tailwind utilities;
`;

      files['tailwind.config.js'] = `module.exports = {
  content: ['./pages/**/*.{js,ts,jsx,tsx}', './components/**/*.{js,ts,jsx,tsx}'],
  theme: { extend: {} },
  plugins: [],
};
`;
    }
  }

  if (language === 'typescript') {
    files['tsconfig.json'] = JSON.stringify({
      compilerOptions: {
        target: 'ES2020',
        lib: ['ES2020', 'DOM'],
        jsx: 'react-jsx',
        module: 'ESNext',
        moduleResolution: 'bundler',
        strict: true,
        esModuleInterop: true,
        skipLibCheck: true,
      },
      include: ['**/*.ts', '**/*.tsx'],
      exclude: ['node_modules'],
    }, null, 2);
  }

  return files;
}
