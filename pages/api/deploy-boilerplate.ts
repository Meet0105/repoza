import type { NextApiRequest, NextApiResponse } from 'next';
import { getServerSession } from 'next-auth';
import { authOptions } from './auth/[...nextauth]';
import { createGitHubRepo, uploadMultipleFiles, getUserGitHubInfo } from '../../backend/github';
import { generateVercelDeployUrl } from '../../backend/vercel';
import { connectToDatabase } from '../../backend/mongodb';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  // Check authentication
  const session = await getServerSession(req, res, authOptions);
  if (!session || !session.user) {
    return res.status(401).json({ error: 'Unauthorized' });
  }

  const { repoName, description, files, framework = 'nextjs' } = req.body;

  if (!repoName || !files) {
    return res.status(400).json({ error: 'repoName and files are required' });
  }

  try {
    // Get user's GitHub access token from session
    // Note: You'll need to store this in the session during OAuth
    const githubToken = (session as any).accessToken || process.env.GITHUB_TOKEN;

    if (!githubToken) {
      return res.status(400).json({
        error: 'GitHub access token not found. Please reconnect your GitHub account.',
      });
    }

    // Step 1: Get user info
    const userInfo = await getUserGitHubInfo(githubToken);
    console.log(`Creating repo for user: ${userInfo.login}`);

    // Step 2: Create GitHub repository
    console.log(`Creating repository: ${repoName}`);
    const repo = await createGitHubRepo(
      githubToken,
      repoName,
      description || 'Generated by Repoza',
      false
    );

    console.log(`Repository created: ${repo.html_url}`);

    // Step 3: Upload files to repository
    console.log(`Uploading ${Object.keys(files).length} files...`);
    await uploadMultipleFiles(githubToken, userInfo.login, repoName, files);

    console.log('Files uploaded successfully');

    // Step 4: Generate Vercel deploy URL
    const vercelDeployUrl = generateVercelDeployUrl(repo.html_url);

    // Step 5: Save deployment record
    try {
      const client = await connectToDatabase();
      if (client) {
        const db = client.db();
        await db.collection('deployments').insertOne({
          userId: session.user.email,
          repoName,
          repoUrl: repo.html_url,
          vercelUrl: vercelDeployUrl,
          framework,
          type: 'boilerplate',
          createdAt: new Date(),
        });
      }
    } catch (dbError) {
      console.error('Failed to save deployment record:', dbError);
      // Don't fail the request if DB save fails
    }

    return res.status(200).json({
      success: true,
      repo: {
        name: repo.name,
        url: repo.html_url,
        cloneUrl: repo.clone_url,
      },
      vercelDeployUrl,
      message: 'Repository created successfully! Redirecting to Vercel...',
    });
  } catch (error: any) {
    console.error('Deployment error:', error);
    return res.status(500).json({
      error: 'Failed to deploy boilerplate',
      details: error.message,
    });
  }
}
